#!/usr/bin/env zsh

# Exit on error
set -e

# jsctl - Manage systemd services with live log display
# Usage: jsctl COMMAND service-name [additional args]

# Setup proper cleanup on exit
JOURNAL_PID=""
cleanup() {
  # Kill the journalctl process if it's running
  if [[ -n "$JOURNAL_PID" && -e /proc/$JOURNAL_PID ]]; then
    kill $JOURNAL_PID 2>/dev/null || true
  fi
}
# Register cleanup to happen on script exit or when Ctrl+C is pressed
trap cleanup EXIT INT TERM

# Check if at least two arguments were provided
if [[ $# -lt 2 ]]; then
    echo "Usage: jsctl COMMAND service-name [additional args]"
    echo "Example: jsctl restart nginx"
    exit 1
fi

# Parse arguments
COMMAND=$1
SERVICE=$2
shift 2  # Remove the first two arguments
OTHER_ARGS="$@"  # Any remaining arguments

# Colors
YELLOW='\033[0;33m'
RESET='\033[0m'

# Check if we need sudo
need_sudo() {
    if [[ $(id -u) -ne 0 ]]; then
        echo "sudo"
    fi
}

SUDO=$(need_sudo)

# Start journalctl in a separate process group with colors enabled
$SUDO journalctl -fu $SERVICE --since "$(date +%T)" --utc --no-hostname -o with-unit --no-full &
JOURNAL_PID=$!
# Give journalctl a moment to start
sleep 0.5

# Execute the systemctl command
echo -e "${YELLOW}Executing: systemctl $COMMAND $SERVICE $OTHER_ARGS${RESET}"
$SUDO systemctl $COMMAND $SERVICE $OTHER_ARGS

# Let user know how to exit
echo -e "${YELLOW}Command completed. Press Ctrl+C to stop log monitoring.${RESET}"

# Wait for the journalctl process to complete or be interrupted
# When Ctrl+C is pressed, the trap will handle cleanup
wait $JOURNAL_PID 2>/dev/null || true
